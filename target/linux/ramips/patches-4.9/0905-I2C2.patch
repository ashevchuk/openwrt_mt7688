diff --git a/drivers/i2c/busses/i2c-mt7621.c b/drivers/i2c/busses/i2c-mt7621.c
index 7f0e1d94..d6b9f63c 100644
--- a/drivers/i2c/busses/i2c-mt7621.c
+++ b/drivers/i2c/busses/i2c-mt7621.c
@@ -244,7 +244,7 @@ static int mtk_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 			goto err_timeout;
 
 		if (pmsg->flags & I2C_M_TEN) {
-			dev_dbg(i2c->dev, "10 bits addr not supported\n");
+			printk("10 bits addr not supported\n");
 			return -EINVAL;
 		} else {
 			/* 7 bits address */
@@ -254,7 +254,7 @@ static int mtk_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 
 		/* buffer length */
 		if (pmsg->len == 0) {
-			dev_dbg(i2c->dev, "length is 0\n");
+			printk("length is 0\n");
 			return -EINVAL;
 		}
 //		mtk_i2c_w32(i2c, SET_BYTECNT(pmsg->len),
@@ -275,7 +275,9 @@ static int mtk_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
                        if(pmsg->buf[0] < I2C_SMBUS_BLOCK_MAX && pmsg->buf[0] > 0)
                           mtk_i2c_read(i2c, pmsg->buf[0], &pmsg->buf[1]);
                        else{
-                          printk(KERN_ERR, "RECV_LEN bogus\n");                            
+                          printk("RECV_LEN bogus %d\n", pmsg->buf[0]);  
+	                  mtk_i2c_w32(i2c, (0xFF<<16) | (0 << 8) | (SM0_MODE_STOP << 4) | 1, REG_SM0CTL1);
+			  mtk_i2c_wait_done(i2c);                          
                           return -EINVAL;
                        }
                 }else if (pmsg->flags & I2C_M_RD) {
@@ -310,6 +312,7 @@ static int mtk_i2c_master_xfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
 	return ret;
 
 err_timeout:
+        printk("i2c timeout\n");
 	mtk_i2c_dump_reg(i2c);
 	mtk_i2c_reset(i2c);
 	return ret;
